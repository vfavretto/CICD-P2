#!/bin/bash

# Script simplificado para testar a esteira CI/CD
# Executa commits individuais de forma mais pr√°tica

set -e

# Cores
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

echo -e "${BLUE}üöÄ Script de Deploy e Teste da Esteira CI/CD${NC}"
echo

# Verificar se estamos no diret√≥rio correto
if [ ! -f "package.json" ]; then
    echo -e "${RED}Execute este script a partir do diret√≥rio raiz do projeto!${NC}"
    exit 1
fi

# Fun√ß√£o para executar commits
execute_commit() {
    local commit_msg="$1"
    local files="$2"
    
    echo -e "${BLUE}üìù Fazendo commit: ${commit_msg}${NC}"
    
    if [ -n "$files" ]; then
        git add $files
    else
        git add .
    fi
    
    git commit -m "$commit_msg"
    echo -e "${GREEN}‚úÖ Commit realizado com sucesso!${NC}"
    echo
}

# Menu de op√ß√µes
echo "Escolha uma op√ß√£o:"
echo "1. Commit de setup inicial completo"
echo "2. Fazer todos os commits de uma vez (modo autom√°tico)"
echo "3. Fazer commits individuais (modo interativo)"
echo "4. Fazer push para GitHub (testar esteira)"
echo "5. Verificar status da esteira"
echo "6. Sair"
echo

read -p "Digite sua escolha (1-6): " choice

case $choice in
    1)
        echo -e "${YELLOW}Fazendo commit inicial completo...${NC}"
        execute_commit "feat: setup inicial completo do projeto CI/CD

- Implementa API REST com CRUD de usu√°rios
- Adiciona documenta√ß√£o Swagger completa  
- Configura logging com Winston e BetterStack
- Implementa middleware de request logging
- Adiciona valida√ß√£o de dados com Sequelize
- Configura Docker e docker-compose para desenvolvimento
- Implementa pipeline CI/CD com GitHub Actions
- Adiciona padroniza√ß√£o de commits e Gitflow
- Inclui scripts de setup e deployment
- Documenta todo o processo no README

Ready for production! üöÄ"
        
        echo -e "${GREEN}‚ú® Commit inicial completo realizado!${NC}"
        echo -e "${YELLOW}Execute: git push origin main para testar a esteira${NC}"
        ;;
        
    2)
        echo -e "${YELLOW}Executando todos os commits automaticamente...${NC}"
        
        # Commit 1: Setup base
        execute_commit "feat: setup inicial da API REST

- Implementa estrutura base da API
- Adiciona configura√ß√£o de banco de dados
- Configura logging b√°sico"

        # Commit 2: Melhorias
        execute_commit "feat: adiciona valida√ß√£o e middlewares

- Implementa valida√ß√£o de entrada
- Adiciona middleware de logging de requisi√ß√µes  
- Melhora tratamento de erros"

        # Commit 3: Docker
        execute_commit "feat: adiciona containeriza√ß√£o

- Implementa Dockerfile otimizado
- Adiciona docker-compose para desenvolvimento
- Configura scripts de inicializa√ß√£o"

        # Commit 4: CI/CD
        execute_commit "ci: implementa pipeline CI/CD completo

- Adiciona GitHub Actions
- Configura deploy autom√°tico
- Implementa versionamento sem√¢ntico
- Adiciona notifica√ß√µes de erro"

        # Commit 5: Documenta√ß√£o
        execute_commit "docs: finaliza documenta√ß√£o

- Completa README com instru√ß√µes
- Adiciona guia de setup detalhado
- Documenta processo de CI/CD
- Inclui scripts de automa√ß√£o"

        echo -e "${GREEN}‚ú® Todos os commits realizados!${NC}"
        echo -e "${YELLOW}Execute: git push origin main para testar a esteira${NC}"
        ;;
        
    3)
        echo -e "${YELLOW}Modo interativo - pressione ENTER para cada commit${NC}"
        
        echo -e "${BLUE}Commit 1/5: Setup base${NC}"
        read -p "Pressione ENTER para continuar..."
        execute_commit "feat: setup inicial da API REST" ""
        
        echo -e "${BLUE}Commit 2/5: Melhorias${NC}"
        read -p "Pressione ENTER para continuar..."
        execute_commit "feat: adiciona valida√ß√£o e middlewares" ""
        
        echo -e "${BLUE}Commit 3/5: Docker${NC}"
        read -p "Pressione ENTER para continuar..."
        execute_commit "feat: adiciona containeriza√ß√£o" ""
        
        echo -e "${BLUE}Commit 4/5: CI/CD${NC}"
        read -p "Pressione ENTER para continuar..."
        execute_commit "ci: implementa pipeline CI/CD completo" ""
        
        echo -e "${BLUE}Commit 5/5: Documenta√ß√£o${NC}"
        read -p "Pressione ENTER para continuar..."
        execute_commit "docs: finaliza documenta√ß√£o" ""
        
        echo -e "${GREEN}‚ú® Todos os commits interativos realizados!${NC}"
        ;;
        
    4)
        echo -e "${YELLOW}Fazendo push para GitHub...${NC}"
        
        # Verificar se h√° commits para enviar
        if git diff-index --quiet HEAD --; then
            echo -e "${YELLOW}Nenhuma mudan√ßa para commit. Fazendo push dos commits existentes...${NC}"
        else
            echo -e "${YELLOW}H√° mudan√ßas n√£o commitadas. Fazendo commit primeiro...${NC}"
            execute_commit "chore: prepara√ß√£o para deploy" ""
        fi
        
        echo -e "${BLUE}üöÄ Enviando para GitHub...${NC}"
        git push origin main
        
        echo -e "${GREEN}‚úÖ Push realizado!${NC}"
        echo -e "${YELLOW}üîç Verifique a esteira em: https://github.com/$(git config --get remote.origin.url | sed 's/.*[:/]\([^/]*\/[^/]*\)\.git/\1/')/actions${NC}"
        ;;
        
    5)
        echo -e "${BLUE}üìä Verificando status...${NC}"
        
        # Status do Git
        echo -e "${YELLOW}Status do Git:${NC}"
        git status --short
        echo
        
        # √öltimos commits
        echo -e "${YELLOW}√öltimos 5 commits:${NC}"
        git log --oneline -5
        echo
        
        # Verificar se h√° remote configurado
        if git remote -v | grep -q origin; then
            echo -e "${GREEN}‚úÖ Remote origin configurado${NC}"
            git remote -v
        else
            echo -e "${RED}‚ùå Remote origin n√£o configurado${NC}"
        fi
        ;;
        
    6)
        echo -e "${BLUE}üëã At√© logo!${NC}"
        exit 0
        ;;
        
    *)
        echo -e "${RED}Op√ß√£o inv√°lida! Execute o script novamente.${NC}"
        exit 1
        ;;
esac

echo
echo -e "${BLUE}üìã Pr√≥ximos passos recomendados:${NC}"
echo "1. Configure os secrets no GitHub (veja docs/SETUP.md)"
echo "2. Fa√ßa push: git push origin main"
echo "3. Monitore a esteira: https://github.com/SEU_USUARIO/CICD-P2/actions"
echo "4. Verifique o deploy no Render"
echo "5. Teste a API em produ√ß√£o"
echo
echo -e "${GREEN}üéâ Pronto para testar a esteira CI/CD!${NC}"