name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  DOCKER_IMAGE_NAME: cicd-api
  DOCKER_REGISTRY: docker.io

jobs:
  # Etapa de CI
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest
    
    steps:
      # Checkout do c√≥digo
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      # Install dependencies
      - name: Install Dependencies
        run: npm ci

      # Build da aplica√ß√£o
      - name: Build Application
        run: npm run build

      # Versionamento sem√¢ntico
      - name: Semantic Versioning
        id: version
        run: |
          # Gera vers√£o baseada no timestamp e commit
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          SHORT_SHA=$(git rev-parse --short HEAD)
          VERSION="1.0.${TIMESTAMP}-${SHORT_SHA}"
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "Generated version: ${VERSION}"

      - name: Build Docker Image
        run: |
          docker build -t ${{ env.DOCKER_IMAGE_NAME }}:${{ steps.version.outputs.VERSION }} .
          docker tag ${{ env.DOCKER_IMAGE_NAME }}:${{ steps.version.outputs.VERSION }} ${{ env.DOCKER_IMAGE_NAME }}:latest

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            package.json
            src/
          retention-days: 30

      - name: Set Version Output
        id: set-version
        run: echo "version=${{ steps.version.outputs.VERSION }}" >> $GITHUB_OUTPUT

    outputs:
      version: ${{ steps.set-version.outputs.version }}

  cd:
    name: Continuous Deployment
    runs-on: ubuntu-latest
    needs: ci
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          # Build da imagem com a vers√£o gerada no CI
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ needs.ci.outputs.version }} .
          docker tag ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ needs.ci.outputs.version }} ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          
          # Push das imagens
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ needs.ci.outputs.version }}
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest

      - name: Deploy to Render
        run: |
          curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK }}" \
            -H "Content-Type: application/json" \
            -d '{
              "environment_variables": {
                "DOCKER_IMAGE": "${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ needs.ci.outputs.version }}",
                "DB_HOST": "${{ secrets.DB_HOST }}",
                "DB_NAME": "${{ secrets.DB_NAME }}",
                "DB_USER": "${{ secrets.DB_USER }}",
                "DB_PASSWORD": "${{ secrets.DB_PASSWORD }}",
                "LOGTAIL_SOURCE_TOKEN": "${{ secrets.LOGTAIL_SOURCE_TOKEN }}",
                "NODE_ENV": "production"
              }
            }'

      # Criar release/tag no GitHub
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.ci.outputs.version }}
          release_name: Release v${{ needs.ci.outputs.version }}
          body: |
            ## üöÄ Release v${{ needs.ci.outputs.version }}
            
            ### Mudan√ßas nesta vers√£o:
            - Deploy autom√°tico via CI/CD
            - Imagem Docker: `${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ needs.ci.outputs.version }}`
            
            ### üì¶ Deployment:
            - ‚úÖ Docker Hub: Imagem publicada
            - ‚úÖ Render: Deploy realizado
            
            **Commit:** ${{ github.sha }}
          draft: false
          prerelease: false

  notify-on-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [ci, cd]
    if: failure()
    
    steps:
      - name: Send Email Notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "‚ùå CICD Pipeline Failed - ${{ github.repository }}"
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: ${{ secrets.EMAIL_USERNAME }}
          body: |
            O pipeline CI/CD falhou!
            
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            Workflow: ${{ github.workflow }}
            
            Verifique os logs em: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

  cleanup:
    name: Cleanup Old Artifacts
    runs-on: ubuntu-latest
    needs: [ci, cd]
    if: always()
    
    steps:
      - name: Delete Old Artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - 30); // 30 dias atr√°s
            
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            for (const artifact of artifacts.data.artifacts) {
              const createdAt = new Date(artifact.created_at);
              if (createdAt < cutoffDate) {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id,
                });
                console.log(`Deleted artifact: ${artifact.name}`);
              }
            } 