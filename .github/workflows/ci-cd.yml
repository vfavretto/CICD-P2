name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  DOCKER_IMAGE_NAME: cicd-api
  DOCKER_REGISTRY: docker.io

jobs:
  # Etapa de CI
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
    
    steps:
      # Checkout do c√≥digo
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      # Install dependencies
      - name: Install Dependencies
        run: npm ci

      # Build da aplica√ß√£o
      - name: Build Application
        run: npm run build

      # Versionamento Sem√¢ntico
      - name: Generate Semantic Version
        id: version
        run: |
          # Obter a √∫ltima tag (se existir)
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Last tag: $LAST_TAG"
          
          # Extrair vers√£o sem o 'v'
          LAST_VERSION=${LAST_TAG#v}
          
          # Separar major.minor.patch
          IFS='.' read -ra VERSION_PARTS <<< "$LAST_VERSION"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}  
          PATCH=${VERSION_PARTS[2]:-0}
          
          # Determinar tipo de bump baseado na mensagem do commit
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Commit message: $COMMIT_MSG"
          
          if [[ $COMMIT_MSG =~ ^(feat|feature)(\(.+\))?!:|^[A-Za-z]+(\(.+\))?!:|BREAKING[[:space:]]CHANGE ]]; then
            # Breaking change - bump major
            NEW_MAJOR=$((MAJOR + 1))
            NEW_MINOR=0
            NEW_PATCH=0
          elif [[ $COMMIT_MSG =~ ^feat(\(.+\))?:|^feature(\(.+\))?: ]]; then
            # New feature - bump minor
            NEW_MAJOR=$MAJOR
            NEW_MINOR=$((MINOR + 1))
            NEW_PATCH=0
          elif [[ $COMMIT_MSG =~ ^(fix|hotfix|patch)(\(.+\))?:|^(build|ci|docs|perf|refactor|style|test)(\(.+\))?: ]]; then
            # Bug fix or other - bump patch
            NEW_MAJOR=$MAJOR
            NEW_MINOR=$MINOR
            NEW_PATCH=$((PATCH + 1))
          else
            # Default - bump patch
            NEW_MAJOR=$MAJOR
            NEW_MINOR=$MINOR
            NEW_PATCH=$((PATCH + 1))
          fi
          
          # Gerar nova vers√£o (apenas semver limpo)
          NEW_VERSION="$NEW_MAJOR.$NEW_MINOR.$NEW_PATCH"
          
          echo "VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          echo "Generated version: $NEW_VERSION"

      - name: Build Docker Image
        run: |
          docker build -t ${{ env.DOCKER_IMAGE_NAME }}:${{ steps.version.outputs.VERSION }} .
          docker tag ${{ env.DOCKER_IMAGE_NAME }}:${{ steps.version.outputs.VERSION }} ${{ env.DOCKER_IMAGE_NAME }}:latest

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ steps.version.outputs.VERSION }}
          path: |
            package.json
            src/
          retention-days: 30

  cd:
    name: Continuous Deployment
    runs-on: ubuntu-latest
    needs: ci
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ needs.ci.outputs.version }} .
          docker tag ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ needs.ci.outputs.version }} ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ needs.ci.outputs.version }}
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest

      - name: Deploy to Render
        run: |
          curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK }}"

      - name: Log Deployment Info
        run: |
          echo "üöÄ Deployment completed!"
          echo "üì¶ Version: ${{ needs.ci.outputs.version }}"
          echo "üê≥ Docker Image: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ needs.ci.outputs.version }}"
          echo "üîó Commit: ${{ github.sha }}"

  notify-on-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [ci, cd]
    if: failure()
    
    steps:
      - name: Send Email Notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "‚ùå CICD Pipeline Failed - ${{ github.repository }}"
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: ${{ secrets.EMAIL_USERNAME }}
          body: |
            üö® O pipeline CI/CD falhou!
            
            **Repository:** ${{ github.repository }}
            **Branch:** ${{ github.ref }}
            **Commit:** ${{ github.sha }}
            **Workflow:** ${{ github.workflow }}
            **Run ID:** ${{ github.run_id }}
            
            **üîç Verifique os logs em:**
            ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

  cleanup:
    name: Cleanup Old Artifacts
    runs-on: ubuntu-latest
    needs: [ci, cd]
    if: always()
    
    steps:
      - name: Delete Old Artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - 30);
            
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            let deletedCount = 0;
            for (const artifact of artifacts.data.artifacts) {
              const createdAt = new Date(artifact.created_at);
              if (createdAt < cutoffDate) {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id,
                });
                console.log(`üóëÔ∏è Deleted artifact: ${artifact.name}`);
                deletedCount++;
              }
            }
            console.log(`‚úÖ Cleanup completed. ${deletedCount} artifacts deleted.`); 